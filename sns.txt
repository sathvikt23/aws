
SET-8: Canteen Notification System using AWS SNS, SQS, and DynamoDB
Build a canteen system where:
Owner manages orders and sends email notifications.
Customer receives updates on order status.
Delivery boy is notified of pickup and delivery.
Feedback and rating are collected via SMS.

Create a DynamoDB Table
Go to DynamoDB ‚Üí Create Table
Table Name: CanteenOrders
Partition key: OrderID (String)
Leave the rest default.
Click Create Table




a. Owner to Customer
Go to SNS ‚Üí Topics ‚Üí Create topic
Type: Standard
Name: OwnerToCustomer_Topic
After creation ‚Üí Create subscription
Protocol: Email
Endpoint: Your verified email
Confirm email from your inbox.
üìß b. Owner to Delivery
Same steps as above.
Name: OwnerToDelivery_Topic
Subscription: Email ‚Üí Delivery boy‚Äôs email
üì± c. Feedback via SMS
Create Topic: FeedbackSMS_Topic
Create Subscription:
Protocol: SMS
Phone number: Your mobile (+91 format)




























Create SQS Queue (Optional for async messaging)
Go to SQS ‚Üí Create queue
Type: Standard
Name: CanteenQueue
Leave defaults
Click Create queue


Create Lambda Function ‚Äî Owner Simulation
‚úÖ Setup:
Go to Lambda ‚Üí Create function
Name: ProcessCanteenOrder
Runtime: Python 3.12 ‚úÖ (currently stable)
Role: Create new role with basic Lambda permissions
Click Create





Update Role Permissions (IMPORTANT!)
Go to:
IAM ‚Üí Roles ‚Üí ProcessCanteenOrder-role
Attach the following policies:
AmazonSNSFullAccess
AmazonDynamoDBFullAccess







In lambda :
import boto3

def lambda_handler(event, context):
    # Initialize clients
    sns = boto3.client('sns')
    dynamodb = boto3.resource('dynamodb')
    
    # Table
    table = dynamodb.Table('canteenorders')

    # Store order in DynamoDB
    order = {
        'OrderID': 'ORD123',
        'Customer': 'John',
        'Status': 'Preparing',
        'Item': 'Burger'
    }
    table.put_item(Item=order)

    # Publish to Customer
    sns.publish(
        TopicArn='arn:aws:sns:eu-north-1:876820568095:OwnerToCustomer_Topic',
        Message='Your order has been accepted and is being prepared.',
        Subject='Order Update'
    )

    # Publish to Delivery Boy
    sns.publish(
        TopicArn='arn:aws:sns:eu-north-1:876820568095:OwnerToDelivery_Topic',
        Message='Pick up Order ORD123 from kitchen.',
        Subject='Delivery Assignment'
    )

    # Send Feedback SMS
    sns.publish(
        TopicArn='arn:aws:sns:eu-north-1:876820568095:FeedbackSMS_Topic',
        Message='Your order is delivered. Please rate your experience.',
    )

    return {
        'statusCode': 200,
        'body': 'Order processed and notifications sent.'
    }
Replace:
REGION with your AWS region (e.g., us-east-1)
ACCOUNTID with your AWS account ID
You can find the Topic ARN in the SNS dashboard.



Deploy and Test
Click Deploy
Choose Test ‚Üí Create new test event ‚Üí Keep defaults
Click Test ‚Üí Should return 200 OK




Verify the Results
‚úÖ DynamoDB:
Go to DynamoDB ‚Üí Tables ‚Üí CanteenOrders
Click Explore table items
You should see:
OrderID: ORD123
Status: Preparing
etc.
‚úÖ Email Notifications:
Check your inbox (the one you subscribed to the OwnerToCustomer_Topic)
You should receive an email titled: ‚ÄúOrder Update‚Äù
Similarly, the delivery person‚Äôs inbox will receive an alert
‚úÖ SMS Notification:
The phone number subscribed to FeedbackSMS_Topic will get an SMS:
‚ÄúYour order is delivered. Please rate your experience.‚Äù






